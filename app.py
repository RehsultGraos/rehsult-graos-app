
import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from fpdf import FPDF
import unicodedata

st.set_page_config(page_title="üå± Rehsult Gr√£os", layout="centered")

# Logo e t√≠tulo
st.image("LOGO REAGRO TRATADA.png", width=180)
st.title("üå± Rehsult Gr√£os")
st.markdown("Diagn√≥stico de fazendas produtoras de gr√£os com an√°lise simulada **GPT-4**")

# Fun√ß√£o para gerar gr√°fico radar
def gerar_grafico_radar(setores, area):
    categorias = list(setores.keys())
    valores = list(setores.values())
    categorias += [categorias[0]]
    valores += [valores[0]]

    angulos = [n / float(len(categorias)) * 2 * 3.14159 for n in range(len(categorias))]

    fig, ax = plt.subplots(figsize=(5, 5), subplot_kw=dict(polar=True))
    ax.plot(angulos, valores, marker='o')
    ax.fill(angulos, valores, alpha=0.25)
    ax.set_xticks(angulos[:-1])
    ax.set_xticklabels(categorias)
    ax.set_title(f"üìä Radar - {area}", y=1.1)
    st.pyplot(fig)

# Fun√ß√£o para gerar PDF
def gerar_pdf(analise, setores_areas):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", "B", 16)
    pdf.cell(200, 10, "üå± Diagn√≥stico Rehsult Gr√£os", ln=True, align="C")

    pdf.set_font("Arial", "B", 12)
    pdf.cell(200, 10, "‚úÖ Diagn√≥stico Conclu√≠do", ln=True)

    pdf.set_font("Arial", "", 12)
    for area, setores in setores_areas.items():
        pdf.cell(200, 10, f"üìä Resultados - {area}", ln=True)
        media = sum(setores.values()) / len(setores)
        pdf.cell(200, 10, f"Pontua√ß√£o Geral: {media:.1f}%", ln=True)
        for setor, valor in setores.items():
            pdf.cell(200, 10, f"- {setor}: {valor:.1f}%", ln=True)

    pdf.multi_cell(0, 10, f"ü§ñ An√°lise com GPT-4 (simulada):
{unicodedata.normalize('NFKD', analise).encode('latin-1', 'ignore').decode('latin-1')}")

    pdf_bytes = pdf.output(dest="S").encode("latin-1")
    return BytesIO(pdf_bytes)

# Fun√ß√£o para gerar an√°lise simulada
def gerar_analise_simulada(setores_areas):
    analise = "‚úÖ **An√°lise Simulada:**\n\n"
    recomendacoes = []

    for area, setores in setores_areas.items():
        for setor, valor in setores.items():
            if valor < 50:
                analise += f"- A √°rea de **{setor}** em **{area}** apresenta baixa pontua√ß√£o, indicando aten√ß√£o.\n"
                recomendacoes.append(f"Revisar pr√°ticas na √°rea de {setor} ({area}).")
            elif 50 <= valor < 80:
                analise += f"- A √°rea de **{setor}** em **{area}** est√° razo√°vel, mas pode melhorar.\n"
                recomendacoes.append(f"Aprimorar t√©cnicas em {setor} ({area}).")
            else:
                analise += f"- A √°rea de **{setor}** em **{area}** est√° com boa pontua√ß√£o.\n"

    if recomendacoes:
        analise += "\nüéØ **Recomenda√ß√µes:**\n"
        for rec in recomendacoes:
            analise += f"- {rec}\n"

    return analise

# Simulando setores
setores_exemplo = {
    "Plantas Daninhas": {
        "Pr√© emergente": 65,
        "Manejo integrado": 85,
        "Desseca√ß√£o": 70,
        "Capina": 95
    },
    "Fertilidade": {
        "An√°lise de Solo": 50,
        "Calagem e Gessagem": 60,
        "Macronutrientes": 85
    }
}

st.markdown("## ‚úÖ Diagn√≥stico Conclu√≠do")

for area, setores in setores_exemplo.items():
    st.markdown(f"### üìä Resultados - {area}")
    media = sum(setores.values()) / len(setores)
    st.markdown(f"**Pontua√ß√£o Geral:** {media:.1f}%")
    gerar_grafico_radar(setores, area)

# Gerar an√°lise simulada
analise = gerar_analise_simulada(setores_exemplo)
st.markdown("### ü§ñ An√°lise com GPT-4 (simulada)")
st.markdown(analise)

# PDF download
pdf_buffer = gerar_pdf(analise, setores_exemplo)
st.download_button("üìÑ Baixar Relat√≥rio em PDF", data=pdf_buffer, file_name="relatorio_rehsult.pdf")
